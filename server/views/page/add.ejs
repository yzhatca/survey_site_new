<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Survey</title>
</head>
<body>
    <div class="container">
        <h1>Create a Survey</h1>
        <form id="surveyForm" method="POST">
            <div>
                <label for="surveyTitle">Survey Title</label>
                <input type="text" id="surveyTitle" placeholder="Enter Survey Title" name="title" required>
            </div>

            <div>
                <label for="description">Survey Description</label>
                <textarea cols="50" id="description" placeholder="Enter Survey Description" name="description" required></textarea>
            </div>

            <div>
                <label for="startDate">Start Date</label>
                <input type="date" id="startDate" name="startTime" required>
            </div>

            <div>
                <label for="endDate">End Date</label>
                <input type="date" id="endDate" name="endTime" required>
            </div>

            <div id="questionFields">
                <!-- Question fields will be dynamically generated here -->
            </div>
            <button type="button" id="addQuestion">Add Question</button>
            <br>
            <button type="submit">Submit</button>

        </form>
    </div>

    <script>
        // JavaScript
        const questionFieldsContainer = document.getElementById('questionFields');
        const addQuestionButton = document.getElementById('addQuestion');

        function generateQuestionField(questionType, questionNumber) {
            let questionField;
            if (questionType === 'multiple_choice') {
                questionField = `
                    <div class="questionField" data-question-type="${questionType}">
                        <label for="question${questionNumber}Text">Question ${questionNumber}</label>
                        <input type="text" id="question${questionNumber}Text" name="questions[]" required>
                        <div class="choicesContainer">
                            <input type="text" class="choiceText" name="choices[]" required>
                            <button type="button" class="removeChoice">Remove</button>
                        </div>
                        <div class="choicesContainer">
                            <input type="text" class="choiceText" name="choices[]" required>
                            <button type="button" class="removeChoice">Remove</button>
                        </div>
                        
                        <button type="button" class="addChoice">Add Choice</button>
                        <button type="button" class="deleteQuestion">Delete Question</button>
                    </div>
                `;
            } else if (questionType === 'short_answers') {
                questionField = `
                    <div class="questionField" data-question-type="${questionType}">
                        <label for="shortAnswer${questionNumber}Text">Question ${questionNumber}</label>
                        <br>
                        <textarea id="shortAnswer${questionNumber}Text" name="questions[]" required></textarea>
                        <button type="button" class="deleteQuestion">Delete Question</button>
                    </div>
                `;
            }
            questionFieldsContainer.insertAdjacentHTML('beforeend', questionField);
        }

        function addQuestion() {
            const questionFieldWrapper = document.createElement('div');
            questionFieldWrapper.classList.add('questionFieldWrapper');

            const questionTypeSelect = document.createElement('select');
            questionTypeSelect.name = 'questionType';
            questionTypeSelect.classList.add('questionTypeSelect');
            questionTypeSelect.innerHTML = `
                <option value="">Select Question Type</option>
                <option value="multiple_choice">Multiple Choice</option>
                <option value="short_answers">Short Answers</option>
            `;

            questionFieldWrapper.appendChild(questionTypeSelect);

            questionTypeSelect.addEventListener('change', function() {
                const selectedType = this.value;
                if (selectedType) {
                    const questionNumber = questionFieldsContainer.querySelectorAll('.questionField').length + 1;
                    generateQuestionField(selectedType, questionNumber);
                    questionTypeSelect.style.display = 'none'; // Hide the type select after choosing a type
                }
            });

            questionFieldsContainer.appendChild(questionFieldWrapper);
        }

        // Add event listener for "Add Question" button
        addQuestionButton.addEventListener('click', addQuestion);

        // Add event listener for "Delete Question" buttons
        questionFieldsContainer.addEventListener('click', function(event) {
            if (event.target.classList.contains('deleteQuestion')) {
                const questionField = event.target.closest('.questionField');
                const questionTypeSelect = questionField.parentElement.querySelector('.questionTypeSelect');
                questionField.remove();
                questionTypeSelect.disabled = false; // Re-enable the corresponding type select
            }
        });

        // Add event listener for "Add Choice" buttons
        questionFieldsContainer.addEventListener('click', function(event) {
            if (event.target.classList.contains('addChoice')) {
                const questionField = event.target.closest('.questionField');
                const choicesContainer = questionField.querySelectorAll('.choicesContainer');

                const newChoiceContainer = document.createElement('div');
                newChoiceContainer.classList.add('choicesContainer');
                newChoiceContainer.innerHTML = `
                    <input type="text" class="choiceText" name="choices[]" required>
                    <button type="button" class="removeChoice">Remove</button>
                `;
                questionField.insertBefore(newChoiceContainer, event.target);
            }
        });

        // Add event listener for "Remove" buttons for choices
        questionFieldsContainer.addEventListener('click', function(event) {
            if (event.target.classList.contains('removeChoice')) {
                const choicesContainer = event.target.parentNode;
                if (choicesContainer.parentNode.querySelectorAll('.choicesContainer').length > 2) {
                    choicesContainer.parentNode.removeChild(choicesContainer);
                } else {
                    alert("At least two choices required.");
                }
            }
        });

        // 修改表单提交事件处理函数
        document.getElementById('surveyForm').addEventListener('submit', function(event) {
            // 收集调查信息
            const surveyData = collectSurveyData();

            // 将调查数据转换为隐藏字段，添加到表单中
            const surveyDataField = document.createElement('input');
            surveyDataField.type = 'hidden';
            surveyDataField.name = 'surveyData'; // 这里是后端接收数据的字段名称
            surveyDataField.value = JSON.stringify(surveyData);

            // 将隐藏字段添加到表单中
            this.appendChild(surveyDataField);
        });

        // 收集调查数据的函数
        function collectSurveyData() {
            const surveyData = {
                questions: []
            };

            // 遍历每个问题字段，收集问题信息
            const questionFields = document.querySelectorAll('.questionField');
            questionFields.forEach((questionField, index) => {
                const questionType = questionField.getAttribute('data-question-type');
                let questionText;

                if (questionType === 'multiple_choice') {
                    questionText = questionField.querySelector('input[type="text"]').value;
                }

                // 构建问题对象
                const question = {
                    'question type': questionType,
                    'question text': questionText,
                    'question choice': []
                };

                if (questionType === 'multiple_choice') {
                    const choiceInputs = questionField.querySelectorAll('.choiceText');
                    choiceInputs.forEach(choiceInput => {
                        const choiceText = choiceInput.value;
                        question['question choice'].push(choiceText);
                    });
                }

                // 将问题对象添加到数组中
                surveyData.questions.push(question);
            });

            // 返回调查数据对象
            return surveyData;
        }
    </script>
</body>
</html>
